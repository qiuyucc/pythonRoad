# 字符串中的字符可以是特殊符号、英文字母、中文字符、日文的平假名或片假名、希腊字母、Emoji字符

# s1 = 'hello, world!'
# s2 = 'hello, world!'
#
# print(s1, s2)
#
# s3 ='''
# hello,
# world
# '''
#
# print(s3, end=' ')

# r 原始字符串， 使用了R或者r, 转义字符串就会变成原始字符串

s1 = '\time up \now'
print(s1)
#字符串s2中没有转义字符，每个字符都是原始含义
s2 = r'\time up \now'
print(s2)

# 字符串中 \ 后面可以接一个8进制，或者16进制来表示字符，例如\141, \x61都表示小写字母a
s1 = '\141\142\143'
s2 = '\u9648\u660a'
print(s1, s2)

# Python为字符串类型提供了非常丰富的运算符，我们可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，
# 可以使用in和not in来判断一个字符串是否包含另外一个字符串，
# 我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符。
s1 = 'hello' + ' ' + 'world'
print(s1)  # hello world
s2 = '!' * 3
print(s2)
s1 += s2
print(s1)
s1 *= 2
print(s1)

# 用*实现字符串的重复是非常有意思的一个运算符，在很多编程语言中，要表示一个有10个a的字符串，
# 你只能写成"aaaaaaaaaa"，但是在Python中，你可以写成'a' * 10。你可能觉得"aaaaaaaaaa"这种写法也没有什么不方便的，
# 那么想一想，如果字符a要重复100次或者1000次又会如何呢？

s1 = 'a whole new world'
s2 = 'hello world'
print(s1 == s2, s1 < s2)      # False True
print(s2 == 'hello world')    # True
print(s2 == 'Hello world')    # False
print(s2 != 'Hello world')    # True
s3 = '骆昊'
print(ord('骆'), ord('昊'))               # 39558 26122
s4 = '王大锤'
print(ord('王'), ord('大'), ord('锤'))    # 29579 22823 38180
print(s3 > s4, s3 <= s4)      # True False


#is 用来比较内存地址
s1 = 'hello world'
s2 = 'hello world'
s3 = s2
print(s1 == s2, s2 == s3)
print(s1 is s2, s2 is s3)

#成员变量
#python 中可以用in 和 not in 判断一个字符串中是否存在另一个字符或者字符串

s1 = 'hello, world'
print('wo' in s1)    # True
s2 = 'goodbye'
print(s2 in s1)      # False


#index of string
s = 'abc123456'
N = len(s)

# 获取第一个字符
print(s[0], s[-N])    # a a

# 获取最后一个字符
print(s[N-1], s[-1])  # 6 6

# 获取索引为2或-7的字符
print(s[2], s[-7])    # c c

# 获取索引为5和-4的字符
print(s[5], s[-4])    # 3 3

#-------------------------------切片
#如果要从字符串中取出多个字符，我们可以对字符串进行切片，运算符是[i:j:k]，其中i是开始索引，索引对应的字符可以取到；j是结束索引，
# 索引对应的字符不能取到；k是步长，默认值为1，表示从前向后获取相邻字符的连续切片，所以:k部分可以省略。
# 假设字符串的长度为N，当k > 0时表示正向切片（从前向后获取字符），如果没有给出i和j的值，则i的默认值是0，j的默认值是N；
# 当k < 0时表示负向切片（从后向前获取字符），如果没有给出i和j的值，则i的默认值是-1，j的默认值是-N - 1。
# 如果不理解，直接看下面的例子，记住第一个字符的索引是0或-N，最后一个字符的索引是N-1或-1就行了。
s = 'abc123456'

# i=2, j=5, k=1的正向切片操作
print(s[2:5])       # c12

# i=-7, j=-4, k=1的正向切片操作
print(s[-7:-4])     # c12

# i=2, j=9, k=1的正向切片操作
print(s[2:])        # c123456

# i=-7, j=9, k=1的正向切片操作
print(s[-7:])       # c123456

# i=2, j=9, k=2的正向切片操作
print(s[2::2])      # c246

# i=-7, j=9, k=2的正向切片操作
print(s[-7::2])     # c246

# i=0, j=9, k=2的正向切片操作
print(s[::2])       # ac246

# i=1, j=-1, k=2的正向切片操作
print(s[1:-1:2])    # b135

# i=7, j=1, k=-1的负向切片操作
print(s[7:1:-1])    # 54321c

# i=-2, j=-8, k=-1的负向切片操作
print(s[-2:-8:-1])  # 54321c

# i=7, j=-10, k=-1的负向切片操作
print(s[7::-1])     # 54321cba

# i=-1, j=1, k=-1的负向切片操作
print(s[:1:-1])     # 654321c

# i=0, j=9, k=1的正向切片
print(s[:])         # abc123456

# i=0, j=9, k=2的正向切片
print(s[::2])       # ac246

# i=-1, j=-10, k=-1的负向切片
print(s[::-1])      # 654321cba

# i=-1, j=-10, k=-2的负向切片
print(s[::-2])      # 642ca

# 变量值	占位符	格式化结果	说明
# 3.1415926	{:.2f}	'3.14'	保留小数点后两位
# 3.1415926	{:+.2f}	'+3.14'	带符号保留小数点后两位
# -1	{:+.2f}	'-1.00'	带符号保留小数点后两位
# 3.1415926	{:.0f}	'3'	不带小数
# 123	{:0>10d}	0000000123	左边补0，补够10位
# 123	{:x<10d}	123xxxxxxx	右边补x ，补够10位
# 123	{:>10d}	' 123'	左边补空格，补够10位
# 123	{:<10d}	'123 '	右边补空格，补够10位
# 123456789	{:,}	'123,456,789'	逗号分隔格式
# 0.123	{:.2%}	'12.30%'	百分比格式
# 123456789	{:.2e}	'1.23e+08'	科学计数法格式

s = 'hello, world'

# center方法以宽度20将字符串居中并在两侧填充*
print(s.center(20, '*'))  # ****hello, world****
# rjust方法以宽度20将字符串右对齐并在左侧填充空格
print(s.rjust(20))        #         hello, world
# ljust方法以宽度20将字符串左对齐并在右侧填充~
print(s.ljust(20, '~'))   # hello, world~~~~~~~~